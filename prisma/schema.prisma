datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum GameStatus {
  SETUP
  OPEN
  LIVE
  COMPLETED
}

enum WorkType {
  FILM
  TV_SHOW
  ALBUM
  SONG
  PLAY
  BOOK
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          Role      @default(USER)
  emailVerified DateTime?
  name          String?
  image         String?

  accounts          Account[]
  picks             Pick[]
  gameParticipants  GameParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  eventDate   DateTime

  games      Game[]
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id          String     @id @default(cuid())
  eventId     String
  name        String
  accessCode  String     @unique
  status      GameStatus @default(SETUP)
  picksLockAt DateTime?

  event        Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  picks        Pick[]
  participants GameParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model GameParticipant {
  id       String   @id @default(cuid())
  userId   String
  gameId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

model Category {
  id                 String  @id @default(cuid())
  eventId            String
  name               String
  order              Int
  points             Int     @default(1)
  isRevealed         Boolean @default(false)
  winnerNominationId String?

  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  nominations Nomination[]
  picks       Pick[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Work {
  id            String   @id @default(cuid())
  type          WorkType
  title         String
  year          Int?
  posterUrl     String?
  externalId    String?
  wikipediaSlug String?  @unique

  nominations Nomination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wikipediaSlug])
}

model Person {
  id            String  @id @default(cuid())
  name          String
  imageUrl      String?
  externalId    String?
  wikipediaSlug String? @unique

  nominations Nomination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wikipediaSlug])
}

model Nomination {
  id             String  @id @default(cuid())
  categoryId     String
  workId         String?
  personId       String?
  nominationText String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  work     Work?    @relation(fields: [workId], references: [id])
  person   Person?  @relation(fields: [personId], references: [id])
  picks    Pick[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([workId])
  @@index([personId])
}

model Pick {
  id           String @id @default(cuid())
  gameId       String
  userId       String
  categoryId   String
  nominationId String

  game       Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  nomination Nomination @relation(fields: [nominationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId, categoryId])
  @@index([gameId])
  @@index([userId])
  @@index([categoryId])
  @@index([nominationId])
  @@index([gameId, userId])
}
